UnBundle 'spf13/vim-autoclose'
UnBundle 'bling/vim-bufferline'

color molokai
let g:airline_theme = 'molokai'

" vim-indent-guides auto-colors don't work nicely in term
" with molokai
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237

" molokai uses awesome undercurls for spelling errors in gui
" but doesn't setup anything good for cterm. Let's fix that.
if has("spell")
    hi clear SpellBad SpellCap SpellLocal SpellRare
    hi SpellBad    guisp=#FF0000 gui=undercurl cterm=underline
    hi SpellCap    guisp=#7070F0 gui=undercurl cterm=underline
    hi SpellLocal  guisp=#70F0F0 gui=undercurl cterm=underline
    hi SpellRare   guisp=#FFFFFF gui=undercurl cterm=underline
endif

" Time to learn to use the proper movement commands
vnoremap <left> <nop>
vnoremap <right> <nop>
vnoremap <down> <nop>
vnoremap <up> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <down> <nop>
nnoremap <up> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <down> <nop>
inoremap <up> <nop>

nnoremap j gj
nnoremap k gk
nnoremap <C-k> <Pageup>
nnoremap <C-j> <Pagedown>
nnoremap <C-l> $
" make home smarter (http://vim.wikia.com/wiki/Smart_home)
noremap <expr> <silent> <C-h> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
noremap <silent> J <C-O><Home>

" when in insert mode, why not escape by hitting jj?
inoremap jj <esc>

" work with system clipboard
inoremap <M-p> <Esc>"+pi
inoremap <M-P> <Esc>"+Pi
vnoremap <M-y> <Esc>"+y
nnoremap <M-y> <Esc>"+y

" https://github.com/majutsushi/tagbar/issues/99
set shell=/bin/sh

" GitDiff off
nnoremap <Leader>gD :diffoff<cr>:bd<cr>:Gedit<cr>

" replace item under cursor
nnoremap <Leader>r :%s/<C-r><C-w>/

" Search using real regexes, not borked vim ones.
nnoremap / /\v
vnoremap / /\v

" tab to hop between matching brackets
nnoremap <tab> %
vnoremap <tab> %

" unite:
nnoremap <space>p :Unite -start-insert file_rec/async:!<cr>
nnoremap <space>f :Unite -start-insert file_rec/async<cr>
nnoremap <space>b :Unite -quick-match buffer<cr>
nnoremap <space>o :Unite outline<cr>
"nnoremap <space>m :Unite mapping<cr>
nnoremap <space>/ :Unite grep:.<cr>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <TAB> <Plug>(unite_select_next_line)
endfunction

" bookmarks
nnoremap <space>m :CopenBookmarks<cr>
nnoremap <C-b> :Bookmark<space><C-r><C-w>
" quick toggle quickfix/locationlist
nmap <script> <silent> <space>l :call ToggleLocationList()<CR>
nmap <script> <silent> <space>q :call ToggleQuickfixList()<CR>

" never ever bring up help on f1. in fact, map it to ESC in I and V
inoremap <F1> <ESC>
vnoremap <F1> <ESC>

" buffer cycling
noremap <F1> :SwitchBuffer 0<CR>
noremap <F2> :SwitchBuffer 1<CR>
noremap <F3> :SwitchBuffer 2<CR>
noremap <F4> :SwitchBuffer 3<CR>
noremap <F5> :SwitchBuffer 4<CR>
noremap <F6> :SwitchBuffer 5<CR>
noremap <F7> :SwitchBuffer 6<CR>
noremap <F8> :SwitchBuffer 7<CR>
noremap <F9> :SwitchBuffer 8<CR>
noremap <F10> :SwitchBuffer 9<CR>
noremap <F11> :SwitchBuffer 10<CR>
noremap <F12> :SwitchBuffer 11<CR>

command! -nargs=1 SwitchBuffer call s:SwitchBuffer(<f-args>)
function! s:SwitchBuffer(index)
    let l:buffers = filter(range(1, bufnr('$')), 'buflisted(v:val)')
    if a:index >= len(l:buffers)
        echo "buffer index out of range"
        return 0
    endif
    let l:num = l:buffers[a:index]
    execute "b" . l:num
    return 1
endfun

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" spf13 does horrible things when trying to 'fix' mappings for omnicomplete
" undo that shit:
iunmap <expr> <Esc>
iunmap <expr> <CR>
iunmap <expr> <Down>
iunmap <expr> <Up>
iunmap <expr> <C-d>
iunmap <expr> <C-u>
" <CR> should select the currently highlighted term
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" decrease the timeouts to saner values, so that there is almost no delay
" moving from mode to mode.
set timeoutlen=200
set ttimeoutlen=200

" lines should be 80 chars
set textwidth=80
set colorcolumn=+1
hi ColorColumn ctermfg=250 ctermbg=234
" autowrap lines in markdown, python files
au FileType markdown setlocal fo+=t
au FileType python setlocal fo+=t
